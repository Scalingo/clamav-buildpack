#!/usr/bin/env bash

set -e

if [ -n "${BUILDPACK_DEBUG}" ]
then
	set -x
fi

build_dir="${1}"
cache_dir="${2}"
env_dir="${3}"

base_dir="$( cd -P "$( dirname "$0" )" && pwd )"
buildpack_dir="$( readlink -f "${base_dir}/.." )"

source "${buildpack_dir}/DEFAULT_VERSIONS"


version="${CLAMAV_VERSION:-"${CLAMAV_DEFAULT_VERSION}"}"
url="https://www.clamav.net/downloads/production/clamav-${version}.linux.x86_64.deb"

cd "${build_dir}"

# We use apt-buildpack to install ClamAV.

# First put APT_FILE_MANIFEST aside:
orig_aptfile="${APT_FILE_MANIFEST:-Aptfile}"

# Set it to a random value for our needs:
APT_FILE_MANIFEST="$( mktemp "clamav_buildpack_XXXX" )"
export APT_FILE_MANIFEST

cat <<EOF >"${build_dir}/${APT_FILE_MANIFEST}"
${url}
EOF

# We need a random name to store our apt-buildpack:
apt_dir="$( mktemp --tmpdir=/tmp apt_buildpack_XXXX )"
rm "${apt_dir}"

APT_BUILDPACK_URL="${APT_BUILDPACK_URL:-https://github.com/Scalingo/apt-buildpack}"
git clone --depth=1 "${APT_BUILDPACK_URL}" "${apt_dir}"

# Install ClamAV packages:
"${apt_dir}/bin/compile" "${build_dir}" "${cache_dir}" "${env_dir}"

#source "${apt_dir}/export"
rm -rf "${apt_dir}"

# Once ClamAV is installed,
# - remove the temporary file pointed by APT_FILE_MANIFEST
# - and set it back to its original value.
rm "${build_dir}/${APT_FILE_MANIFEST}"
APT_FILE_MANIFEST="${orig_aptfile}"
export APT_FILE_MANIFEST

# Copy files to BUILD_DIR:
for d in "bin" "include" "lib" "sbin"; do
	mv "${build_dir}/.apt/usr/local/${d}" "${build_dir}/"
done

rm -rf "${build_dir}/.apt"

PATH="${PATH}:${build_dir}/bin:${build_dir}/sbin"
export PATH

LD_LIBRARY_PATH="${LD_LIBRARY_PATH}${build_dir}/lib"
export LD_LIBRARY_PATH

# Build some variables, make sure we have nice default values.
#
# We also pass variables to the template. For these, the path to the files
# might change a bit (i.e. $build_dir --> /app).
# Also, we use environment vars to pass variables to the templates.

# Where freshclam's configuration file is when running:
prod_freshclam_config_file="/app/clamav/freshclam.conf"
export FRESHCLAM_CONFIG_FILE="${prod_freshclam_config_file}"

# Where freshclam's configuration file is when building:
freshclam_config_file="${prod_freshclam_config_file//\/app/${build_dir}}"

mkdir -p "$( dirname "${freshclam_config_file}" )"


# Where clamd's configuration file is when running:
prod_clamd_config_file="/app/clamav/clamd.conf"
export CLAMD_CONFIG_FILE="${prod_clamd_config_file}"

# Where clamd's configuration file is when building:
clamd_config_file="${prod_clamd_config_file//\/app/${build_dir}}"
mkdir -p "$( dirname "${clamd_config_file}" )"


# Where clamd's database is when running:
prod_clamd_db_dir="/app/clamav/data"
export CLAMD_DATABASE_DIR="${prod_clamd_db_dir}"

# Where clamd's database is when building:
clamd_db_dir="${prod_clamd_db_dir//\/app/${build_dir}}"


clamd_db_mirror="${CLAMD_DATABASE_MIRROR:-database.clamav.net}"
export CLAMD_DATABASE_MIRROR="${clamd_db_mirror}"

sock="/app/run/clamd.sock"
export CLAMD_LOCAL_SOCKET="${sock}"
mkdir -p "$( dirname "${sock}" )"


# Build freshclam configuration file:
erb "${buildpack_dir}/config/freshclam.conf.erb" > "${freshclam_config_file}"

# Build clamd configuration file:
erb "${buildpack_dir}/config/clamd.conf.erb" > "${clamd_config_file}"

# Refresh the virus database
# Put it in cache for future deployments
# The source is specified in the conf file
freshclam \
	--config-file="${freshclam_config_file}" \
	--datadir="${cache_dir}/clamav-data/"

# Replace the old virus database:
rm -rf "${clamd_db_dir}"
cp -rp "${cache_dir}/clamav-data" "${clamd_db_dir}"

# Copy profile.d scripts:
mkdir -p "${build_dir}/.profile.d"

find "${buildpack_dir}/profile.d" -type f -name "*.sh" \
	-exec cp --target-directory="${build_dir}/.profile.d/" {} +
